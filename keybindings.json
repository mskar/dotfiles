// Place your key bindings in this file to override the defaults
[
  { "key": "alt+b", "command": "cursorWordLeft", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+b", "command": "cursorWordStartLeft", "when": "textInputFocus" },
  { "key": "alt+c", "command": "editor.action.transformToTitlecase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+d", "command": "deleteWordRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+d", "command": "deleteWordRight", "when": "textInputFocus && !editorReadonly" },
  { "key": "alt+enter", "command": "editor.action.quickFix", "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
  { "key": "alt+f", "command": "cursorWordEndRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+f", "command": "cursorWordEndRight", "when": "textInputFocus" },
  { "key": "alt+l", "command": "editor.action.transformToLowercase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+space", "command": "editor.action.previewDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
  { "key": "alt+u", "command": "editor.action.transformToUppercase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "cmd+1", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+1", "command": "workbench.view.explorer", "when": "editorFocus" },
  { "key": "cmd+3", "command": "workbench.action.toggleSidebarVisibility", "when": "searchViewletVisible" },
  { "key": "cmd+3", "command": "workbench.view.search", "when": "!searchViewletVisible" },
  { "key": "cmd+5", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+5", "command": "workbench.view.debug", "when": "editorFocus" },
  { "key": "cmd+6", "command": "workbench.actions.view.problems" },
  { "key": "cmd+9", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+9", "command": "workbench.view.scm", "when": "editorFocus" },
  { "key": "cmd+alt+b", "command": "editor.action.goToImplementation", "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
  { "key": "cmd+alt+l", "command": "editor.action.formatDocument", "when": "editorHasDocumentFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly" },
  { "key": "cmd+alt+l", "command": "editor.action.formatSelection", "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly" },
  { "key": "cmd+alt+m", "command": "editor.action.codeAction", "when": "editorTextFocus", "args": { "kind": "refactor.extract.function", "apply": "ifSingle" } },
  { "key": "cmd+alt+o", "command": "workbench.action.gotoSymbol" },
  { "key": "cmd+alt+v", "command": "editor.action.codeAction", "when": "editorTextFocus", "args": { "kind": "refactor.extract.constant", "apply": "ifSingle" } },
  { "key": "cmd+alt+y", "command": "workbench.action.sync" },
  { "key": "cmd+alt+z", "command": "git.revertSelectedRanges", "when": "editorHasSelection && editorTextFocus && !editorReadonly" },
  { "key": "cmd+down", "command": "editor.action.goToDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus" },
  { "key": "cmd+e", "command": "workbench.action.openRecent" },
  { "key": "cmd+e", "command": "workbench.action.quickOpenNavigateNext", "when": "inQuickOpen" },
  { "key": "cmd+enter", "command": "python.datascience.execSelectionInteractive", "when": "editorTextFocus && python.datascience.featureenabled && python.datascience.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
  { "key": "cmd+enter", "command": "python.execSelectionInTerminal", "when": "editorTextFocus && !findInputFocussed && !python.datascience.ownsSelection && !replaceInputFocussed && editorLangId == 'python'" },
  { "key": "cmd+k", "command": "git.commitAll", "when": "!inDebugMode && !terminalFocus" },
  { "key": "cmd+numpad1", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+numpad1", "command": "workbench.view.explorer", "when": "editorFocus" },
  { "key": "cmd+numpad3", "command": "workbench.action.toggleSidebarVisibility", "when": "searchViewletVisible" },
  { "key": "cmd+numpad3", "command": "workbench.view.search", "when": "!searchViewletVisible" },
  { "key": "cmd+numpad5", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+numpad5", "command": "workbench.view.debug", "when": "editorFocus" },
  { "key": "cmd+numpad6", "command": "workbench.actions.view.problems" },
  { "key": "cmd+numpad9", "command": "workbench.action.toggleSidebarVisibility", "when": "!editorFocus" },
  { "key": "cmd+numpad9", "command": "workbench.view.git", "when": "editorFocus" },
  { "key": "cmd+o", "command": "workbench.action.showAllSymbols" },
  { "key": "cmd+p", "command": "editor.action.triggerParameterHints", "when": "editorHasSignatureHelpProvider && editorTextFocus" },
  { "key": "cmd+shift+'", "command": "workbench.action.toggleMaximizedPanel" },
  { "key": "cmd+shift+a", "command": "workbench.action.showCommands" },
  { "key": "cmd+shift+enter", "command": "acceptSelectedSuggestion", "when": "editorFocus && suggestWidgetVisible" },
  { "key": "cmd+shift+k", "command": "git.pushTo", "when": "!inDebugMode && !terminalFocus" },
  { "key": "cmd+shift+o", "command": "workbench.action.quickOpen" },
  { "key": "cmd+t", "command": "git.sync" },
  { "key": "cmd+y", "command": "editor.action.previewDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor" },
  { "key": "ctrl+-", "command": "undo", "when": "textInputFocus" },
  { "key": "ctrl+/", "command": "undo", "when": "textInputFocus" },
  { "key": "ctrl+`", "command": "workbench.action.focusActiveEditorGroup", "when": "terminalFocus"},
  { "key": "ctrl+`", "command": "workbench.action.terminal.focus"},
  { "key": "ctrl+a", "command": "cursorLineStart", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+alt+b", "command": "cursorWordPartLeft", "when": "textInputFocus" },
  { "key": "ctrl+alt+d", "command": "deleteWordPartRight", "when": "textInputFocus && !editorReadonly" },
  { "key": "ctrl+alt+f", "command": "cursorWordPartRight", "when": "textInputFocus" },
  { "key": "ctrl+alt+h", "command": "deleteWordPartLeft", "when": "textInputFocus && !editorReadonly" },
  { "key": "ctrl+d", "command": "deleteRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+g", "command": "hideSuggestWidget", "when": "suggestWidgetVisible && textInputFocus" },
  { "key": "ctrl+j", "command": "editor.action.showHover", "when": "editorTextFocus" },
  { "key": "ctrl+shift+alt+b", "command": "cursorWordPartLeftSelect", "when": "textInputFocus" },
  { "key": "ctrl+shift+alt+f", "command": "cursorWordPartRightSelect", "when": "textInputFocus" },
  { "key": "ctrl+space", "command": "editor.action.triggerSuggest", "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly" },
  { "key": "ctrl+t", "command": "editor.action.transposeLetters", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+u", "command": "deleteAllLeft", "when": "!editorFocus" },
  { "key": "ctrl+w", "command": "deleteWordLeft", "when": "!editorFocus" },
  { "key": "shift+alt+b", "command": "cursorWordStartLeftSelect", "when": "textInputFocus" },
  { "key": "shift+alt+f", "command": "cursorWordEndRightSelect", "when": "textInputFocus" },
  { "key": "shift+escape", "command": "workbench.action.focusActiveEditorGroup", "when": "!editorTextFocus"}
]
